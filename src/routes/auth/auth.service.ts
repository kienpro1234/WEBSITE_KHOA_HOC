import { Injectable } from '@nestjs/common'
import {
  AccountAlreadyExistsException,
  EmailNotFoundException,
  EmailNotFoundOrInvalidPasswordException,
  FailedToSendOTPException,
  InvalidVerificationCodeException,
  OTPExpiredException,
} from 'src/routes/auth/auth.error'
import {
  LoginBodyType,
  RefreshTokenType,
  RegisterBodyType,
  SendOTPBodyType,
  UserAUthProviderIncludeUserAndRoleType,
} from 'src/routes/auth/auth.model'
import { AuthRepo } from 'src/routes/auth/auth.repo'
import {
  AuthProviderType,
  TypeOfVerificationCode,
  TypeOfVerificationCodeType,
} from 'src/shared/constants/auth.constant'
import { DeviceInfoType } from 'src/shared/decorators/device-info.decorator'
import { generateOTP } from 'src/shared/helper'
import { HashingService } from 'src/shared/services/hashing.service'
import { TokenService } from 'src/shared/services/token.service'
import { AccessTokenPayloadCreate } from 'src/shared/types/jwt.type'

import { addMilliseconds } from 'date-fns'
import envConfig from 'src/shared/config'
import ms, { StringValue } from 'ms'
import { EmailService } from 'src/shared/services/email.service'
import { SharedRoleRepo } from 'src/shared/repositories/shared-role.repo'
import { v4 as uuidv4 } from 'uuid'
@Injectable()
export class AuthService {
  constructor(
    private readonly authRepo: AuthRepo,
    private readonly hashingService: HashingService,
    private readonly tokenService: TokenService,
    private readonly emailService: EmailService,
    private readonly sharedRoleRepo: SharedRoleRepo,
  ) {}

  // function n√†y ƒë·ªÉ t·∫°o tokens khi ƒëƒÉng nh·∫≠p
  async generateTokens({ deviceId, roleId, roleName, userId }: AccessTokenPayloadCreate) {
    // 1, Ki·ªÉm tra tr√™n device n√†y ƒë√£ c√≥ refreshToken ch∆∞a, n·∫øu ch∆∞a ho·∫∑c refreshTOken h·∫øt h·∫°n th√¨ x√≥a c≈© t·∫°o m·ªõi, n·∫øu ƒë√£ c√≥ th√¨ l·∫•y ra d√πng.
    let refreshToken: RefreshTokenType['token'] | null = null
    const refreshTokenDb = await this.authRepo.findUniqueRefreshToken({
      deviceId,
    })

    // N·∫øu c√≥ v√† ch∆∞a h·∫øt h·∫°n th√¨ d√πng refreshToken c≈©
    if (refreshTokenDb?.token && new Date(refreshTokenDb.expiresAt) > new Date()) {
      refreshToken = refreshTokenDb.token
    }

    // N·∫øu ƒë√£ h·∫øt h·∫°n th√¨ x√≥a c≈©
    if (refreshTokenDb?.token && new Date(refreshTokenDb.expiresAt) < new Date()) {
      await this.authRepo.deleteRefreshToken({ id: refreshTokenDb.id })
    }

    const [accessToken, newRefreshToken] = await Promise.all([
      this.tokenService.signAccessToken({ deviceId, roleId, roleName, userId }),
      this.tokenService.signRefreshToken({ userId }),
    ])

    // N·∫øu ƒë·∫øn ƒë√¢y v·∫´n ch∆∞a c√≥ refreshToken th√¨ d√πng refreshToken m·ªõi
    if (!refreshToken) {
      refreshToken = newRefreshToken

      const decodedRefreshToken = await this.tokenService.verifyRefreshToken(refreshToken)

      await this.authRepo.createRefreshToken({
        userId,
        deviceId,
        expiresAt: new Date(decodedRefreshToken.exp * 1000),
        token: refreshToken,
      })
    }

    return { accessToken, refreshToken }
  }

  //Ph∆∞∆°ng th·ª©c login n√†y d√†nh cho ƒëƒÉng nh·∫≠p local, ƒëƒÉng nh·∫≠p b·∫±ng oauth th√¨ k c·∫ßn
  async login(body: LoginBodyType & { deviceInfo: DeviceInfoType }) {
    //1, L·∫•y th√¥ng tin user, ki·ªÉm tra user c√≥ t·ªìn t·∫°i hay kh√¥ng, m·∫≠t kh·∫©u c√≥  ƒë√∫ng hay kh√¥ng

    const { deviceName, deviceType, ip, userAgent } = body.deviceInfo

    // Do 1 user c√≥ th·ªÉ c√≥ nhi·ªÅu email(oauth, local), n√™n truy v·∫•n unique theo email, password
    const hashedPassword = await this.hashingService.hash(body.password)
    const user = await this.authRepo.findUniqueUserIncludeRole({
      email_password: {
        email: body.email,
        password: hashedPassword,
      },
    })

    if (!user) {
      throw EmailNotFoundOrInvalidPasswordException
    }

    //2, T·∫°o m·ªõi device
    const device = await this.authRepo.createOrupdateDevice({
      userId: user.id,
      device: { deviceName, deviceType, ip, userAgent },
    })

    const tokens = await this.generateTokens({
      deviceId: device.id,
      roleId: user.roleId,
      roleName: user.role.name,
      userId: user.id,
    })

    return tokens
  }

  async sendOTP(body: SendOTPBodyType) {
    //1, Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i hay ch∆∞a
    // ·ªû ƒë√¢y c√≥ th·ªÉ c√≥ nhi·ªÅu t√†i kho·∫£n c√≥ c√πng email nh∆∞ng k sao, c·ª© g·ª≠i ƒë·∫øn email ƒë·∫•y, ch·ªó n√†o ƒëang ·ªü giao di·ªán x√°c th·ª±c th√¨ m·ªõi l·∫•y ƒë∆∞·ª£c m√£ otp ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n
    // Nh∆∞ng m√† ph·∫£i check xem ƒë√£ t·ªìn t·∫°i t√†i kho·∫£n local ch∆∞a, n·∫øu c√≥ r·ªìi v√† type l√† register th√¨ m·ªõi b√°o l·ªói l√† ƒë√£ t·ªìn t·∫°i, c√≤n n·∫øu check ch·ªâ t·ªìn t·∫°i c√°c t√†i kho·∫£n oauth, m√† ch∆∞a t·ªìn t·∫°i local v√† type l√† register th√¨ k quƒÉng l·ªói cho g·ª≠i otp nh∆∞ th∆∞·ªùng
    // Gi·ªù l√†m sao ƒë·ªÉ bi·∫øt ƒë√∫ng email n√†y , th√¨ ƒë√£ t·ªìn t·∫°i oauth hay ch∆∞a, v√≠ d·ª• tr∆∞·ªùng h·ª£p trong db c√≥ 2 t√†i kho·∫£n 1 oauth v√† 1 local , nh∆∞ng findFirst ch·ªâ t√¨m th·∫±ng oauth th√¨ n√≥ b√°o c√≥ oauth r·ªìi, th√¨ v·∫´n g·ª≠i otp d√π ƒë√£ c√≥ local, v·∫≠y l√†m sao ƒë·ªÉ b·ªè qua m·∫•y th·∫±ng oauth m√† ch·ªâ t√¨m ki·∫øm m·ªói th·∫±ng local cho vi·ªác send otp cho local n√†y
    // c√°ch 1: findMany, ki·ªÉm tra trong danh s√°ch nh·ªØng user c√≥ c√πng email n√†y xem c√≥ t√†i kho·∫£n n√†o kh√¥ng c√≥ UserAuthProvider hay kh√¥ng , n·∫øu to√†n b·ªô ƒë·ªÅu c√≥ t·ª©c l√† ch∆∞a c√≥ t√†i kho·∫£n n√†o ƒëƒÉng k√≠ v·ªõi local, c√≥ th·ªÉ ti·∫øp t·ª•c sendotp
    // Tr∆∞·ªùng h·ª£p sendOtp c√≤n √°p d·ª•ng v·ªõi t√†i kho·∫£n m√† khi ƒëƒÉng nh·∫≠p oauth m√† ch∆∞a c√≥ email, th√¨ b·∫Øt x√°c th·ª±c email b·∫±ng otp -> th√™m type l√† verify_email trong verification code, ƒëi·ªÅu n√†y b·∫Øt x√°c th·ª±c email, gi·∫£m thi·ªÉu ƒë∆∞·ª£c t√†i kho·∫£n v·ªõi c√°c email r√°c
    const users = await this.authRepo.findUsersByEmailIncludeAuthProvider(body.email)

    //N·∫øu kh√¥ng t√¨m th·∫•y t√†i kho·∫£n n√†o th√¨ b√°o l·ªói
    if (users.length === 0) {
      throw EmailNotFoundException
    }

    // l·ªçc ra th·∫±ng user m√† ch∆∞a c√≥ t√†i kho·∫£n oauth, t·ª©c l√† ƒë√£ ƒëƒÉng k√≠ v·ªõi local
    const user = users.find((user) => user.authProvider === null)

    // N·∫øu user ƒë√£ ƒëƒÉng k√≠ v·ªõi local r·ªìi m√† type l√† register th√¨ b√°o l·ªói
    if (user && body.type === TypeOfVerificationCode.REGISTER) {
      throw AccountAlreadyExistsException
    }

    // N·∫øu user ch∆∞a ƒëƒÉng k√≠ v·ªõi local r·ªìi m√† type l√† forget password th√¨ b√°o l·ªói(ch·ªâ cho ph√©p ƒë·ªïi m·∫≠t kh·∫©u n·∫øu t√†i kho·∫£n ƒë√≥ ƒëƒÉng k√≠ v·ªõi local, c√≤n n·∫øu ƒëƒÉng nh·∫≠p v·ªõi oauth th√¨ kh√¥ng c√≥ ch·ª©c nƒÉng n√†y)
    if (!user && body.type === TypeOfVerificationCode.FORGET_PASSWORD) {
      throw EmailNotFoundException
    }

    // Tr∆∞·ªùng h·ª£p type l√† VERIFY_EMAIL th√¨ ti·∫øp t·ª•c cho send otp, ·ªü b√™n FE s·∫Ω check m·ªói l·∫ßn ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n b·∫±ng oauth, n·∫øu t√†i kho·∫£n ƒë√≥ ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c th√¨ redirect ƒë·∫øn trang add email ƒë·ªÉ x√°c th·ª±c email, do ƒë√≥ ·ªü ƒë√¢y kh√¥ng l√†m g√¨ cho ti·∫øp t·ª•c n·∫øu type l√† verify_email

    //2, T·∫°o m√£ OTP v√† l∆∞u v√†o db
    const code = generateOTP()
    await this.authRepo.createVerificationCode({
      code,
      email: body.email,
      type: body.type,
      expiresAt: addMilliseconds(new Date(), ms(envConfig.OTP_EXPIRES_IN as StringValue)).toISOString(),
    })

    //3, G·ª≠i m√° OTP
    const { error } = await this.emailService.sendOTP({ email: body.email, code })
    if (error) {
      throw FailedToSendOTPException
    }
    return { message: 'OTP sent successfully' }
  }

  async validateVerificationCode({
    email,
    type,
    code,
  }: {
    email: string
    type: TypeOfVerificationCodeType
    code: string
  }) {
    const verificationCode = await this.authRepo.findUniqueVerificationCode({
      email_type: {
        email: email,
        type,
      },
    })

    if (!verificationCode) {
      throw InvalidVerificationCodeException
    }

    if (verificationCode && verificationCode.code !== code) {
      throw InvalidVerificationCodeException
    }

    if (new Date(verificationCode.expiresAt) < new Date()) {
      throw OTPExpiredException
    }

    return verificationCode
  }

  async register(body: RegisterBodyType) {
    //1, check otp code c√≥ h·ª£p l·ªá hay kh√¥ng
    const verificationCode = await this.validateVerificationCode({
      email: body.email,
      code: body.code,
      type: TypeOfVerificationCode.REGISTER,
    })

    //2, T·∫°o user v·ªõi role learner
    const learnerRoleId = await this.sharedRoleRepo.getLearnerRoleId()

    const hashedPassword = await this.hashingService.hash(body.password)

    const newUser = await this.authRepo.createUser({
      email: body.email,
      name: body.name,
      password: hashedPassword,
      roleId: learnerRoleId,
    })

    //3, X√≥a otp code
    await this.authRepo.deleteVerificationCode({
      id: verificationCode.id,
    })

    return newUser
  }

  // üëá PH∆Ø∆†NG TH·ª®C CHUNG M·ªöI
  async processSocialLogin(
    profile: { email?: string; name: string; providerUserId?: string; provider: AuthProviderType },
    deviceInfo: DeviceInfoType | null,
  ) {
    // T√¨m xem UserAuthProvider n√†y c√≥ trong db ch∆∞a, n·∫øu ch∆∞a t·∫°o m·ªõi user sau ƒë√≥ t·∫°o m·ªõi UserAuthProvider
    //ki·ªÉm tra xem n·∫øu email t·ªìn t·∫°i th√¨ t√¨m ki·∫øm unique theo emailFromProvider v√† provider
    let userAuthProvider: UserAUthProviderIncludeUserAndRoleType | null = null
    if (profile.email) {
      userAuthProvider = await this.authRepo.findUniqueUserAuthProviderIncludeUserAndRole({
        emailFromProvider_provider: {
          emailFromProvider: profile.email,
          provider: profile.provider,
        },
      })
    }

    // Ki·ªÉm tra n·∫øu providerUserId t·ªìn t·∫°i th√¨ t√¨m ki·∫øm unique theo providerUserId v√† provider
    if (!userAuthProvider && profile.providerUserId) {
      userAuthProvider = await this.authRepo.findUniqueUserAuthProviderIncludeUserAndRole({
        provider_providerUserId: {
          providerUserId: profile.providerUserId,
          provider: profile.provider,
        },
      })
    }

    //  N·∫øu UserAuthProvider n√†y ƒë√£ t·ªìn t·∫°i th√¨ d√πng UserAuthProvider c≈©, ƒëƒÉng nh·∫≠p lu√¥n, ch∆∞a c√≥ th√¨ t·∫°o User m·ªõi v√† t·∫°o UserAuthProvider m·ªõi r·ªìi m·ªõi ƒëƒÉng nh·∫≠p

    if (!userAuthProvider) {
      //Hi·ªán t·∫°i ƒë√£ code ƒë·∫øn ƒë√¢y, ƒë√¢y l√† tr∆∞·ªùng h·ª£p n·∫øu ƒë·ªãnh danh ƒëƒÉng nh·∫≠p oauth n√†y ch∆∞a c√≥ th√¨ t·∫°o m·ªõi user v√† t·∫°o m·ªõi userAuthProvider, c√≤n n·∫øu c√≥ r·ªìi th√¨ d√πng c≈© ƒëƒÉng nh·∫≠p lu√¥n, k ph·∫£i t·∫°o user v√† userAuthProvider m·ªõi
      const learnerRoleId = await this.sharedRoleRepo.getLearnerRoleId()
      const randomPassword = uuidv4()
      const hashedPassword = await this.hashingService.hash(randomPassword)

      const user = await this.authRepo.createUserIncludeRole({
        email: profile.email ?? '', // N·∫øu ƒë·∫øn ƒë√¢y m√† v·∫´n ch∆∞a c√≥ email th√¨ t·∫°o user v·ªõi email r·ªóng, cu·ªëi c√πng ·ªü BE ki·ªÉm tra n·∫øu user.email m√† r·ªóng th√¨ redirect ƒë·∫øn trang th√™m email v√† x√°c th·ª±c email
        name: profile.name ?? '',
        password: hashedPassword,
        roleId: learnerRoleId,
      })

      // T·∫°o userAuthProvider
      userAuthProvider = await this.authRepo.createUserAuthProviderIncludeUserAndRole({
        provider: profile.provider,
        providerUserId: profile.providerUserId ?? '',
        userId: user.id,
        emailFromProvider: profile.email ?? '',
      })
    }

    // Gi·ªù l√† d√π userAUthProvider ƒë√£ t·ªìn t·∫°i ho·∫∑c t·∫°o m·ªõi th√¨ ƒë·∫øn ƒë√¢y th√¨ t√≠nh l√† ƒë√£ c√≥ userAuthProvider , th√¨ t·∫°o device, t·∫°o token ƒë·ªÉ ƒëƒÉng nh·∫≠p
    const device = await this.authRepo.createOrupdateDevice({
      device: {
        deviceName: deviceInfo?.deviceName ?? 'Unknown',
        deviceType: deviceInfo?.deviceType ?? 'Unknown',
        ip: deviceInfo?.ip ?? 'Unknown',
        userAgent: deviceInfo?.userAgent ?? 'Unknown',
      },
      userId: userAuthProvider.userId,
    })

    // Tr·∫£ v·ªÅ token gi·ªëng nh∆∞ ph∆∞∆°ng th·ª©c login b√¨nh th∆∞·ªùng
    return this.generateTokens({
      deviceId: device.id,
      roleId: userAuthProvider.user.roleId,
      roleName: userAuthProvider.user.role.name,
      userId: userAuthProvider.userId,
    })
  }
}
